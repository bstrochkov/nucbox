server {
    listen 443 ssl;
    server_name sysmon.borisa.net;
    root /var/www/html/;

    ssl_certificate /etc/letsencrypt/live/borisa.net/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/borisa.net/privkey.pem;

    auth_request /validate;

    location = /validate {
        # forward the /validate request to Vouch Proxy
        proxy_pass http://nucbox_vouch_1:9090/validate;
        # be sure to pass the original host header
        proxy_set_header Host $http_host;

        # Vouch Proxy only acts on the request headers
        proxy_pass_request_body off;
        proxy_set_header Content-Length "";

        # optionally add X-Vouch-User as returned by Vouch Proxy along with the request
        auth_request_set $auth_resp_x_vouch_user $upstream_http_x_vouch_user;

        # optionally add X-Vouch-IdP-Claims-* custom claims you are tracking
        #    auth_request_set $auth_resp_x_vouch_idp_claims_groups $upstream_http_x_vouch_idp_claims_groups;
        #    auth_request_set $auth_resp_x_vouch_idp_claims_given_name $upstream_http_x_vouch_idp_claims_given_name;
        # optinally add X-Vouch-IdP-AccessToken or X-Vouch-IdP-IdToken
        #    auth_request_set $auth_resp_x_vouch_idp_accesstoken $upstream_http_x_vouch_idp_accesstoken;
        #    auth_request_set $auth_resp_x_vouch_idp_idtoken $upstream_http_x_vouch_idp_idtoken;

        # these return values are used by the @error401 call
        auth_request_set $auth_resp_jwt $upstream_http_x_vouch_jwt;
        auth_request_set $auth_resp_err $upstream_http_x_vouch_err;
        auth_request_set $auth_resp_failcount $upstream_http_x_vouch_failcount;

        # Vouch Proxy can run behind the same Nginx reverse proxy
        # may need to comply to "upstream" server naming
        # proxy_pass http://vouch.yourdomain.com/validate;
        # proxy_set_header Host $http_host;
    }

    # if validate returns `401 not authorized` then forward the request to the error401block
    error_page 401 = @error401;

    location @error401 {
        # redirect to Vouch Proxy for login
        return 302 https://sso.borisa.net/login?url=$scheme://$http_host$request_uri&vouch-failcount=$auth_resp_failcount&X-Vouch-Token=$auth_resp_jwt&error=$auth_resp_err;
        # you usually *want* to redirect to Vouch running behind the same Nginx config proteced by https
        # but to get started you can just forward the end user to the port that vouch is running on
        # return 302 http://vouch.yourdomain.com:9090/login?url=$scheme://$http_host$request_uri&vouch-failcount=$auth_resp_failcount&X-Vouch-Token=$auth_resp_jwt&error=$auth_resp_err;
    }

    location / {
      # forward authorized requests to your service protectedapp.yourdomain.com
      proxy_pass http://nucbox_netdata_1:19999;
      proxy_set_header X-Forwarded-Host $host;
      proxy_set_header X-Forwarded-Server $host;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_http_version 1.1;
      proxy_pass_request_headers on;
      proxy_set_header Connection "keep-alive";
      proxy_store off;
      # you may need to set these variables in this block as per https://github.com/vouch/vouch-proxy/issues/26#issuecomment-425215810
      #    auth_request_set $auth_resp_x_vouch_user $upstream_http_x_vouch_user
      #    auth_request_set $auth_resp_x_vouch_idp_claims_groups $upstream_http_x_vouch_idp_claims_groups;
      #    auth_request_set $auth_resp_x_vouch_idp_claims_given_name $upstream_http_x_vouch_idp_claims_given_name;

      # set user header (usually an email)
      # proxy_set_header X-Vouch-User $auth_resp_x_vouch_user;
      # optionally pass any custom claims you are tracking
      #     proxy_set_header X-Vouch-IdP-Claims-Groups $auth_resp_x_vouch_idp_claims_groups;
      #     proxy_set_header X-Vouch-IdP-Claims-Given_Name $auth_resp_x_vouch_idp_claims_given_name;
      # optionally pass the accesstoken or idtoken
      #     proxy_set_header X-Vouch-IdP-AccessToken $auth_resp_x_vouch_idp_accesstoken;
      #     proxy_set_header X-Vouch-IdP-IdToken $auth_resp_x_vouch_idp_idtoken;
    }
}

server {
    listen 443 ssl;
    server_name sso.borisa.net;
    ssl_certificate /etc/letsencrypt/live/borisa.net/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/borisa.net/privkey.pem;

    location / {
        proxy_pass http://nucbox_vouch_1:9090;
        # be sure to pass the original host header
        proxy_set_header Host $http_host;
    }
}

server {
    listen 443 ssl;
    server_name qbittorrent.borisa.net;
    ssl_certificate /etc/letsencrypt/live/borisa.net/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/borisa.net/privkey.pem;

    location / {
        proxy_pass http://nucbox_qbittorrent_1:1080;
        # be sure to pass the original host header
        proxy_set_header Host $http_host;
    }
}
